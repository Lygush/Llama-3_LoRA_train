import json
import os
import time
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import tkinter as tk

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ç–∫–µ–Ω–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç GUI
matplotlib.use('TkAgg')


class MetricsHandler(FileSystemEventHandler):
    def __init__(self, file_path, refresh_interval=5):
        self.file_path = file_path
        self.refresh_interval = refresh_interval
        self.last_update = 0
        self.data = []
        self.window_closed = False  # –§–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
        plt.style.use('default')
        self.bg_color = "#222222"
        self.fg_color = "#DDDDDD"

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ –æ—Å–∏
        self.fig, self.axes = plt.subplots(3, 1, figsize=(12, 10))
        self.fig.suptitle('Training Metrics Dashboard', fontsize=16, color=self.fg_color)
        self.fig.patch.set_facecolor(self.bg_color)
        for ax in self.axes:
            ax.set_facecolor(self.bg_color)
            ax.tick_params(colors=self.fg_color)
            ax.title.set_color(self.fg_color)
            ax.xaxis.label.set_color(self.fg_color)
            ax.yaxis.label.set_color(self.fg_color)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
        self.fig.subplots_adjust(left=0.1)  # –£–≤–µ–ª–∏—á–µ–Ω –ª–µ–≤—ã–π –æ—Ç—Å—Ç—É–ø
        self.fig.subplots_adjust(hspace=0.4)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.fig.canvas.mpl_connect('close_event', self.handle_close)
        
        # –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        plt.ion()
        self.fig.show()
        self.fig.canvas.draw()

        # –£–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç "topmost" –¥–ª—è –æ–∫–Ω–∞
        try:
            if matplotlib.get_backend().startswith('TkAgg'):
                win = self.fig.canvas.manager.window
                win.attributes('-topmost', False)
        except:
            pass

    def handle_close(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.window_closed = True
        plt.close(self.fig)

    def on_modified(self, event):
        if event.src_path == self.file_path:
            current_time = time.time()
            if current_time - self.last_update > self.refresh_interval:
                self.last_update = current_time
                self.load_data()
                self.plot_metrics()

    def load_data(self):
        self.data = []
        try:
            if not os.path.exists(self.file_path):
                print(f"File {self.file_path} not found. Waiting...")
                return
                
            with open(self.file_path, 'r') as f:
                for line in f:
                    try:
                        self.data.append(json.loads(line))
                    except json.JSONDecodeError:
                        continue
        except Exception as e:
            print(f"‚ö†Ô∏è Error loading data: {e}")

    def plot_metrics(self):
        # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ
        if self.window_closed or not plt.fignum_exists(self.fig.number):
            return

        if not self.data:
            return

        try:
            df = pd.DataFrame(self.data)

            if 'step' not in df.columns:
                df['step'] = df.index

            numeric_cols = ['loss', 'eval_loss', 'learning_rate', 'grad_norm', 'epoch', 'step']
            for col in numeric_cols:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')

            train_df = df[df.get('step_type') == 'training']
            valid_df = df[df.get('step_type') == 'validation']

            # Loss
            ax = self.axes[0]
            ax.clear()
            ax.set_facecolor(self.bg_color)
            if not train_df.empty and 'loss' in train_df.columns:
                ax.plot(train_df['step'], train_df['loss'], 'b-', label='Training Loss', alpha=0.7)
            if not valid_df.empty and 'eval_loss' in valid_df.columns:
                ax.plot(valid_df['step'], valid_df['eval_loss'], 'r-', label='Validation Loss', alpha=0.7)
            ax.set_title('Loss', color=self.fg_color)
            ax.set_xlabel('Step', color=self.fg_color)
            ax.set_ylabel('Loss', color=self.fg_color)
            ax.legend()
            ax.grid(True, color='#444444')
            ax.tick_params(colors=self.fg_color)

            # Learning Rate
            ax = self.axes[1]
            ax.clear()
            ax.set_facecolor(self.bg_color)
            if not train_df.empty and 'learning_rate' in train_df.columns:
                ax.plot(train_df['step'], train_df['learning_rate'], 'g-', label='Learning Rate')
            ax.set_title('Learning Rate', color=self.fg_color)
            ax.set_xlabel('Step', color=self.fg_color)
            ax.set_ylabel('Learning Rate', color=self.fg_color)
            ax.legend()
            ax.grid(True, color='#444444')
            ax.tick_params(colors=self.fg_color)

            # Gradient Norm
            ax = self.axes[2]
            ax.clear()
            ax.set_facecolor(self.bg_color)
            if not train_df.empty and 'grad_norm' in train_df.columns:
                ax.plot(train_df['step'], train_df['grad_norm'], 'm-', label='Gradient Norm')
            ax.set_title('Gradient Norm', color=self.fg_color)
            ax.set_xlabel('Step', color=self.fg_color)
            ax.set_ylabel('Norm', color=self.fg_color)
            ax.legend()
            ax.grid(True, color='#444444')
            ax.tick_params(colors=self.fg_color)

            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–µ–∑ –ø–æ–¥–Ω—è—Ç–∏—è –æ–∫–Ω–∞
            self.fig.canvas.draw_idle()
            self.fig.canvas.flush_events()

        except Exception as e:
            print(f"‚ö†Ô∏è Error plotting metrics: {e}")


def main(metrics_file):
    event_handler = MetricsHandler(metrics_file)
    observer = Observer()
    observer.schedule(event_handler, path=os.path.dirname(metrics_file), recursive=False)
    observer.start()

    print(f"üìä Monitoring metrics file: {metrics_file}")
    print("üîÑ Dashboard will update automatically. Close window to exit.")

    try:
        event_handler.load_data()
        event_handler.plot_metrics()

        # –î–∞–¥–∏–º –æ–∫–Ω—É –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        time.sleep(0.5)
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –æ–∫–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        try:
            if matplotlib.get_backend().startswith('TkAgg'):
                win = event_handler.fig.canvas.manager.window
                win.attributes('-topmost', False)
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ
                win.lower()
        except:
            pass

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º —Å –º–µ–Ω—å—à–µ–π —á–∞—Å—Ç–æ—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        while not event_handler.window_closed and plt.fignum_exists(event_handler.fig.number):
            plt.pause(1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏

    except KeyboardInterrupt:
        print("Stopping dashboard...")
    finally:
        print("Stopping observer...")
        observer.stop()
        observer.join()
        plt.ioff()
        plt.close()


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='Real-time Training Metrics Dashboard')
    parser.add_argument('--metrics-file', type=str, required=True,
                        help='Path to the metrics JSONL file')
    args = parser.parse_args()

    main(args.metrics_file)
